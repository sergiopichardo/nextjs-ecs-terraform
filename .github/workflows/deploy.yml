name: Deploy Next.js App to ECS

on:
  push:
    branches:
      - main 

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: nextjs-ecs-terraform # Added: Just the repository name
  IMAGE_TAG: latest
  ECS_SERVICE: nextjs-ecs-terraform-service
  ECS_CLUSTER: nextjs-ecs-terraform-cluster
  ECS_TASK_DEFINITION: nextjs-ecs-terraform-task-definition
  CONTAINER_NAME: nextjs-ecs-terraform-container

jobs:
  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set Up Docker
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64
      

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate image name
        id: generate-image-name
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          echo "image-name=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Build, tag and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.generate-image-name.outputs.image-name }}
          file: Dockerfile
          platforms: linux/amd64

  terraform:
    name: Infrastructure
    runs-on: ubuntu-latest
    needs: [build_and_deploy]
    outputs:
      private_subnet_ids: ${{ steps.terraform-outputs.outputs.private_subnet_ids }}
      rds_security_group_id: ${{ steps.terraform-outputs.outputs.rds_security_group_id }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7

      - name: Initialize Terraform
        run: terraform init

      - name: terraform plan
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            terraform plan -var-file=prod.tfvars
          else
            terraform plan -var-file=nonprod.tfvars
          fi

      - name: Apply Terraform Changes
        run: |
          if [ "${{ github.ref_name }}" == "mt-917/create-cloud-infra" ]; then
            terraform workspace select default
            terraform apply -no-color -input=false -auto-approve -var-file=nonprod.tfvars
          elif [ "${{ github.ref_name }}" == "main" ]; then
            terraform workspace select prod
            terraform apply -no-color -input=false -auto-approve -var-file=prod.tfvars
          fi

      - name: Get Terraform Outputs
        id: terraform-outputs
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            terraform workspace select prod
          else
            terraform workspace select default
          fi
          echo "private_subnet_ids=$(terraform output -raw private_subnet_ids)" >> $GITHUB_OUTPUT
          echo "rds_security_group_id=$(terraform output -raw rds_security_group_id)" >> $GITHUB_OUTPUT
